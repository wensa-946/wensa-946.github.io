import{_ as a,o as e,c as i,a2 as r}from"./chunks/framework.CAv1dD81.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"快速开始.md","filePath":"快速开始.md","lastUpdated":1731687583000}'),t={name:"快速开始.md"};function o(p,l,s,n,h,c){return e(),i("div",null,l[0]||(l[0]=[r('<h2 id="事件循环" tabindex="-1">事件循环 <a class="header-anchor" href="#事件循环" aria-label="Permalink to &quot;事件循环&quot;">​</a></h2><p>学习知识我们需要做好知识铺垫，才能更好理解。<br> 浏览器进程模型 =&gt; 渲染主线程 =&gt; 消息循环（即事件循环） =&gt; 异步。</p><h3 id="浏览器的进程模型" tabindex="-1">浏览器的进程模型 <a class="header-anchor" href="#浏览器的进程模型" aria-label="Permalink to &quot;浏览器的进程模型&quot;">​</a></h3><ul><li>进程：程序运行需要内存空间，可以把这块内存空间理解为进程。<br> 每个程序至少有一个进程，进程之间相互独立，即使通信，也需要双方同意。</li><li>线程：运行程序的代码媒介叫做线程。<br> 一个进程至少有一个线程，所以在进程开启后会自动创建一个线程来运行代码，这个线程就是主线程。<br> 如果程序需要同时执行多块代码，主线程就会启动更多的线程来执行代码，所以一个进程中可以包含多个线程。</li><li>浏览器是一个多进程多线程的应用程序。浏览器内部工作极其复杂几乎接近操作系统，为了避免相互影响，减少连崩几率；当启动浏览器后，它会自动启动多个进程。 <br></li></ul><p>最主要的进程有：</p><ul><li>浏览器进程: 主要负责界面显示(标签页、导航栏、回退按钮...)、用户交互(用户的点击、鼠标滑动悬停...)、子进程管理等。浏览器进程内部会启动多个线程处理不同的任务。</li><li>网络进程: 负责加载网络资源(图片、脚本、视频...)。网络进程内部会启动多个线程来处理不同的网络任务。</li><li><strong>渲染进程</strong><ul><li>渲染进程启动后，会开启一个<strong>渲染主线程</strong>，主线程负责执行 <strong>HTML、CSS、JS</strong> 代码。</li><li>默认情况下，浏览器会为每个标签页开启一个新的渲染进程，以保证不同的标签页之间不相互影响(site-per-tab)。</li><li>所以未来谷歌浏览器未来想变更模式减少浏览器进程数量，同一个站点一个进程(site-per-process)。<a href="https://chromium.googlesource.com/chromium/src/+/main/docs/process_model_and_site_isolation.md#Modes-and-Availability" target="_blank" rel="noreferrer">chrome官方说明文档</a></li></ul></li></ul><h3 id="渲染主线程" tabindex="-1">渲染主线程 <a class="header-anchor" href="#渲染主线程" aria-label="Permalink to &quot;渲染主线程&quot;">​</a></h3><p>渲染主线程是浏览器中最繁忙的线程，需要它处理的任务包括但不限于：</p><ul><li>解析 HTML (拿到html字符串，解析dom树)</li><li>解析 CSS（拿到选择器，解析cssom树）</li><li>计算样式 （rem、%、 =&gt; px，层叠）</li><li>布局 (算几何信息)</li><li>处理图层 (z-index)</li><li>每秒把页面画 60 次 (fps、使动画更流畅平滑)</li><li>执行全局 JS 代码</li><li>执行事件处理函数</li><li>执行计时器的回调函数</li><li>... <br></li></ul><p>要处理这么多任务，渲染主线程该如何调度呢？<br> 排队</p><ul><li>在最开始的时候，渲染主线程会进入一个无限循环</li><li>每一次循环会检查消息队列中是否有任务存在。如果有，就取出第一个任务执行，执行完一个后进入下一次循环；如果没有，则进入休眠状态。</li><li>其他所有线程（包括其他进程的线程）可以随时向消息队列添加任务。新任务会加到消息队列的末尾。在添加新任务时，如果主线程是休眠状态，则会将其唤醒以继续循环拿取任务 <br></li></ul><p><strong>整个过程，被称之为消息循环(在浏览器中)，即事件循环(在 Node.js 中)</strong> <br></p><blockquote><p>（插一嘴: 详细过程可以去 github 上看谷歌源码） <br> 下面是一些知识拓展，可以更好的促进事件循环理解</p></blockquote><h4 id="如何理解-js-的异步" tabindex="-1">如何理解 JS 的异步 ? <a class="header-anchor" href="#如何理解-js-的异步" aria-label="Permalink to &quot;如何理解 JS 的异步 ?&quot;">​</a></h4><h5 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h5><p>js是一门单线程的语言，因为它运行在浏览器的渲染主线程中，而渲染主线程只有一个。<br></p><p>而渲染主线程承担着诸多的工作，渲染页面、执行js，解析html、css，执行回调...都在其中运行。<br></p><h5 id="为何要异步-解决什么问题" tabindex="-1">为何要异步？解决什么问题 ? <a class="header-anchor" href="#为何要异步-解决什么问题" aria-label="Permalink to &quot;为何要异步？解决什么问题 ?&quot;">​</a></h5><p>如果使用同步的方式，极可能会导致主线程产生的阻塞，从而导致消息队列中的其他任务无法执行。 这样会导致繁忙的主线程消耗时间，页面也无法及时更新，给用户造成卡死的现象。</p><p>所以浏览器采用异步方式来避免。<br> 具体做法是当某些任务发生时，比如计时器、网络、事件监听，主线程将任务交给其他线程去处理，自身立即结束任务的执行，转而执行后续代码。当其他线程完成时，将事先传递的回调函数包装成任务，加入到消息队列的末尾排队，等待主线程调度执行。<br></p><h5 id="异步的好处" tabindex="-1">异步的好处？ <a class="header-anchor" href="#异步的好处" aria-label="Permalink to &quot;异步的好处？&quot;">​</a></h5><p>在这种异步模式下，浏览器永不阻塞，从而最大限度的保证了单线程的流畅运行。</p><h4 id="js为何会阻碍渲染" tabindex="-1">JS为何会阻碍渲染 ? <a class="header-anchor" href="#js为何会阻碍渲染" aria-label="Permalink to &quot;JS为何会阻碍渲染 ?&quot;">​</a></h4><p>JS 和渲染都在主线程执行，当 JS 执行耗时操作时，浏览器会阻塞渲染，导致页面卡顿。</p><h4 id="任务有优先级吗" tabindex="-1">任务有优先级吗 ? <a class="header-anchor" href="#任务有优先级吗" aria-label="Permalink to &quot;任务有优先级吗 ?&quot;">​</a></h4><p>任务没有优先级，在消息队列中先进先出</p><p>但<strong>消息队列是有优先级的</strong></p><p>根据 W3C 的最新解释: <a href="https://html.spec.whatwg.org/multipage/webappapis.html#perform-a-microtask-checkpoint" target="_blank" rel="noreferrer">官方文档</a></p><ul><li>每个任务都有一个任务类型，同一个类型的任务必须在一个队列，不同类型的任务可以分属于不同的队列。 在一次事件循环中，浏览器可以根据实际情况从不同的队列中取出任务执行。</li><li>浏览器必须准备好一个微队列，微队列中的任务优先所有其他任务执行</li></ul><blockquote><p>随着浏览器的复杂度急剧提升，W3C 不再使用宏队列的说法</p></blockquote><p>在目前 chrome 的实现中，至少包含了下面的队列：</p><ul><li>延时队列：用于存放计时器到达后的回调任务，优先级「中」</li><li>交互队列：用于存放用户操作后产生的事件处理任务，优先级「高」</li><li>微队列：用户存放需要最快执行的任务，优先级「最高」</li></ul><blockquote><p>添加任务到微队列的主要方式主要是使用 Promise、MutationObserver</p></blockquote><blockquote><p>面试题：阐述一下 JS 的事件循环</p><p>事件循环又叫做消息循环，是浏览器渲染主线程的工作方式。</p><p>在 Chrome 的源码中，它开启一个不会结束的 for 循环，每次循环从消息队列中取出第一个任务执行，而其他线程只需要在合适的时候将任务加入到队列末尾即可。</p><p>过去把消息队列简单分为宏队列和微队列，这种说法目前已无法满足复杂的浏览器环境，取而代之的是一种更加灵活多变的处理方式。</p><p>根据 W3C 官方的解释，每个任务有不同的类型，同类型的任务必须在同一个队列，不同的任务可以属于不同的队列。不同任务队列有不同的优先级，在一次事件循环中，由浏览器自行决定取哪一个队列的任务。但浏览器必须有一个微队列，微队列的任务一定具有最高的优先级，必须优先调度执行。</p></blockquote><blockquote><p>面试题：JS 中的计时器能做到精确计时吗？为什么？</p><p>不行，因为：</p><ol><li>计算机硬件没有原子钟，无法做到精确计时</li><li>操作系统的计时函数本身就有少量偏差，由于 JS 的计时器最终调用的是操作系统的函数，也就携带了这些偏差</li><li>按照 W3C 的标准，浏览器实现计时器时，如果嵌套层级超过 5 层，则会带有 4 毫秒的最少时间，这样在计时时间少于 4 毫秒时又带来了偏差</li><li>受事件循环的影响，计时器的回调函数只能在主线程空闲时运行，因此又带来了偏差</li></ol></blockquote>',35)]))}const d=a(t,[["render",o]]);export{b as __pageData,d as default};
