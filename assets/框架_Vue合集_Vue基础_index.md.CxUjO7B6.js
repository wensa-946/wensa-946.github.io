import{_ as e,c as a,a2 as i,o as n}from"./chunks/framework.BQmytedh.js";const k=JSON.parse('{"title":"Vue基础","description":"双向数据绑定, 模板语法, 生命周期, 实例, 组件通信, props, $emit, 计算属性, 侦听器, 指令, 条件与循环渲染, 事件处理","frontmatter":{"title":"Vue基础","description":"双向数据绑定, 模板语法, 生命周期, 实例, 组件通信, props, $emit, 计算属性, 侦听器, 指令, 条件与循环渲染, 事件处理","keywords":["双向数据绑定","模板语法","生命周期","实例","组件通信","props","$emit","计算属性","侦听器","指令","条件与循环渲染","事件处理"]},"headers":[],"relativePath":"框架/Vue合集/Vue基础/index.md","filePath":"框架/Vue合集/Vue基础/index.md","lastUpdated":1732627543000}'),t={name:"框架/Vue合集/Vue基础/index.md"};function p(l,s,o,d,c,h){return n(),a("div",null,s[0]||(s[0]=[i(`<h2 id="vue基础" tabindex="-1">Vue基础 <a class="header-anchor" href="#vue基础" aria-label="Permalink to &quot;Vue基础&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">主要考察点</p><p>Vue 的双向数据绑定、模板语法、Vue 实例与生命周期钩子、组件之间的通信（props 和 $emit）、条件与循环渲染、事件处理、计算属性与侦听器的使用、以及 Vue 的指令系统。</p></div><h3 id="vue-计算属性的函数名和-data-中的属性可以同名吗-为什么" tabindex="-1">Vue 计算属性的函数名和 data 中的属性可以同名吗 ? 为什么 ? <a class="header-anchor" href="#vue-计算属性的函数名和-data-中的属性可以同名吗-为什么" aria-label="Permalink to &quot;Vue 计算属性的函数名和 data 中的属性可以同名吗 ? 为什么 ?&quot;">​</a></h3><p>不可以。因为 Vue 会<strong>将 data 中的属性和计算属性都挂载到 Vue 实例上</strong>，如果它们同名，则会发生<strong>命名冲突</strong>，导致实例中的<strong>属性被覆盖</strong>，从而引发不可预知的错误。</p><details class="details custom-block"><summary>代码示例</summary><p><strong>1）命名冲突的本质</strong>： 在 Vue 中，<code>data</code> 和计算属性（<code>computed</code>）最终都会作为 Vue 实例的一个属性存在。如果我们在 <code>data</code> 中定义了一个属性 <code>foo</code>，同时又在 <code>computed</code> 中定义了一个名为 <code>foo</code> 的计算属性，二者会产生命名冲突，Vue 会警告你存在重复定义。Vue 在初始化时会按照一定的顺序（如<code>Props</code>、<code>methods</code>、<code>data</code>、<code>computed</code>、<code>watch</code>）将这些属性挂载到 Vue 实例上，后<code>挂载的属性会覆盖先挂载的同名属性</code>。</p><p><strong>2）计算属性的优先级</strong>： <code>data</code> 的优先级高于计算属性。如果在 <code>data</code> 和计算属性中存在相同的属性，那么在模板中使用这些属性时，会优先使用 <code>data</code> 中的数据，因为 <code>data</code> 是直接存储数据的，而计算属性是基于 <code>data</code> 或其他属性的变化进行计算的‌。</p><p><strong>3）避免命名冲突的最佳实践</strong>： 为了保持代码的清晰和简洁，建议在项目实施时遵循以下几点：</p><ul><li>命名规范： 确保 <code>data</code> 和计算属性有不同的命名，避免命名冲突。</li><li>模块化管理： 将各自逻辑进行分模块管理，提高代码的可读性和可维护性。</li><li>严格代码审查： 在代码审查阶段注意这些潜在问题，及时纠正。</li></ul><p><strong>4）命名冲突如何提醒</strong>： 在运行环境下，Vue 通常会在控制台输出警告信息，来提醒开发者存在属性命名冲突，帮助快速定位和修复问题。</p><p><strong>5）其它Vue中的相关特性</strong>：</p><ul><li>methods： 与计算属性类似，<code>methods</code> 中的方法也会被挂载到 Vue 实例上，同样需要避免与 <code>data</code> 和计算属性同名。</li><li>Watchers： 虽然数据监听器（<code>watchers</code>）与 <code>data</code> 和计算属性相关，但它们不会直接参与命名冲突，因为 <code>watchers</code> 本身不挂载属性名到 Vue 实例上。</li></ul></details><h3 id="vue-的-v-show-和-v-if-有什么区别-使用场景分别是什么" tabindex="-1">Vue 的 v-show 和 v-if 有什么区别 ? 使用场景分别是什么 ? <a class="header-anchor" href="#vue-的-v-show-和-v-if-有什么区别-使用场景分别是什么" aria-label="Permalink to &quot;Vue 的 v-show 和 v-if 有什么区别 ? 使用场景分别是什么 ?&quot;">​</a></h3><p><code>v-show</code> 和 <code>v-if</code> 是 Vue.js 中两种常用的指令，都可以用于控制元素的显示和隐藏，但它们有本质上的区别：</p><p>1）<code>v-show</code> 是通过控制元素的 CSS <code>display</code> 属性来显示或隐藏元素。无论条件是否为真，元素都会被渲染到 DOM 中，只是通过设置 CSS 样式来控制它的可见性。</p><p>2）<code>v-if</code> 则是通过条件判断来决定是否渲染元素。如果条件为假，元素根本不会被渲染到 DOM 中。</p><p>使用场景</p><p>1）<code>v-show</code> 适合用于需要频繁切换显示/隐藏状态的场景。因为它只是在现有的 DOM 元素上进行 CSS 切换，性能开销较小。</p><p>2）<code>v-if</code> 适合用于在条件变化不太频繁的情况下使用，因为它每次重新渲染时都会进行完整的 DOM 操作，性能开销较大。</p><details class="details custom-block"><summary>补充</summary><p>1）性能：</p><ul><li><code>v-show</code> 带来的性能开销主要体现在第一次渲染时。因为即便元素隐藏了，它还是会占据 DOM 的空间和资源。但是，后续的切换开销极小。</li><li><code>v-if</code> 每次状态切换都伴随着元素的创建和销毁，当条件频繁变化时，这样的操作会带来一定的性能开销。因此，在频繁切换时，不推荐使用 <code>v-if</code>。</li></ul><p>2）初始渲染：</p><ul><li><code>v-show</code> 在初次渲染时无论条件是否满足都会将元素生成到 DOM 中，然后根据条件通过修改 <code>display</code> 属性来决定显示/隐藏。</li><li><code>v-if</code> 在初次渲染时会根据条件决定是否创建元素，条件为假时，元素不会生成到 DOM 中。</li></ul><p>3）使用搭配：</p><p>针对某些场景，可以考虑 <code>v-show</code> 和 <code>v-if</code> 的结合使用。例如，外层使用 <code>v-if</code> 进行一次性判断是否渲染内容，因为 <code>v-if</code> 可以确保根本不生成不需要的 DOM 元素；内层使用 <code>v-show</code> 进行频繁的显示隐藏切换。</p><p>4）过渡效果：</p><p>在使用过渡效果时，<code>v-show</code> 和 <code>v-if</code> 的行为也有所不同。<code>v-show</code> 会触发 CSS 过渡效果（transition），而 <code>v-if</code> 需要配合 Vue 的 <code>transition</code> 组件使用。</p><p>5）开发指南：</p><p>当你需要确保某个 DOM 元素在结构上存在，但在某些情况下需要隐藏它，建议使用 <code>v-show</code>。 当你确定在某些条件下完全不需要某个 DOM 元素时，使用 <code>v-if</code> 会更适合。</p></details><h3 id="在-vue-组件中写-name-选项有什么作用" tabindex="-1">在 Vue 组件中写 name 选项有什么作用 ? <a class="header-anchor" href="#在-vue-组件中写-name-选项有什么作用" aria-label="Permalink to &quot;在 Vue 组件中写 name 选项有什么作用 ?&quot;">​</a></h3><p>在 Vue 组件中定义 <code>name</code> 选项的主要作用是为组件指定一个名字，这个名字在调试、递归组件、全局注册和基础组件复用时会非常有用。具体来看，<code>name</code> 选项会：</p><p>1）帮助在 Vue DevTools 中识别组件，增强调试体验。</p><p>2）在递归组件调用中，确保 Vue 能够正确引用自身。</p><p>3）用于全局组件注册，使得组件能够被全局识别和使用。</p><p>4）提高在 <code>&lt;keep-alive&gt;</code> 中使用时的可读性和可调试性。</p><details class="details custom-block"><summary>补充</summary><p><strong>1）调试和工具支持</strong>：</p><p>当你在开发过程中使用 Vue DevTools 时，组件名称能让你更清晰地了解组件树结构。如果没有 <code>name</code> 选项，Vue DevTools 中的组件会以匿名组件显示名称，这在调试过程中会增加一定难度。</p><p><strong>2）递归组件</strong>：</p><p>当你想在一个组件内部递归调用自己时，必须给这个组件提供一个 <code>name</code>。例如，树形结构组件常常需要递归调用自身以渲染嵌套列表。示例代码如下：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Tree</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Tree&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 其他选项</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  template: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &lt;ul&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &lt;li v-for=&quot;node in treeData&quot; :key=&quot;node.id&quot;&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        {{ node.name }}</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &lt;Tree v-if=&quot;node.children&quot; :treeData=&quot;node.children&quot;/&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &lt;/li&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &lt;/ul&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  \`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  props: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;treeData&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p><strong>全局注册和复用</strong>：</p><p>给组件命名后，你可以全局注册它并通过名称直接引用，从而提高组件的复用性。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyComponent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./MyComponent.vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Vue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;MyComponent&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, MyComponent);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>4）<code>&lt;keep-alive&gt;</code> 结合</strong>：</p><p>在使用 <code>&lt;keep-alive&gt;</code> 标签时（它用于在组件切换时保存组件的状态或避免重新渲染），你常常会指定名字，以更方便地控制缓存。</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">keep-alive</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> include</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MyComponent&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">router-view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">router-view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">keep-alive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></details>`,20)]))}const u=e(t,[["render",p]]);export{k as __pageData,u as default};
