import{_ as e,c as t,a2 as o,o as i}from"./chunks/framework.BQmytedh.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"快速开始.md","filePath":"快速开始.md","lastUpdated":1732032547000}'),a={name:"快速开始.md"};function p(s,l,r,c,u,d){return i(),t("div",null,l[0]||(l[0]=[o('<h2 id="事件循环" tabindex="-1">事件循环 <a class="header-anchor" href="#事件循环" aria-label="Permalink to &quot;事件循环&quot;">​</a></h2><p>学习知识我们需要做好知识铺垫，才能更好理解。<br> 浏览器进程模型 =&gt; 渲染主线程 =&gt; 消息循环（即事件循环） =&gt; 异步。</p><h3 id="浏览器的进程模型" tabindex="-1">浏览器的进程模型 <a class="header-anchor" href="#浏览器的进程模型" aria-label="Permalink to &quot;浏览器的进程模型&quot;">​</a></h3><ul><li>进程：程序运行需要内存空间，可以把这块内存空间理解为进程。<br> 每个程序至少有一个进程，进程之间相互独立，即使通信，也需要双方同意。</li><li>线程：运行程序的代码媒介叫做线程。<br> 一个进程至少有一个线程，所以在进程开启后会自动创建一个线程来运行代码，这个线程就是主线程。<br> 如果程序需要同时执行多块代码，主线程就会启动更多的线程来执行代码，所以一个进程中可以包含多个线程。</li><li>浏览器是一个多进程多线程的应用程序。浏览器内部工作极其复杂几乎接近操作系统，为了避免相互影响，减少连崩几率；当启动浏览器后，它会自动启动多个进程。 <br></li></ul><p>最主要的进程有：</p><ul><li>浏览器进程: 主要负责界面显示(标签页、导航栏、回退按钮...)、用户交互(用户的点击、鼠标滑动悬停...)、子进程管理等。浏览器进程内部会启动多个线程处理不同的任务。</li><li>网络进程: 负责加载网络资源(图片、脚本、视频...)。网络进程内部会启动多个线程来处理不同的网络任务。</li><li><strong>渲染进程</strong><ul><li>渲染进程启动后，会开启一个<strong>渲染主线程</strong>，主线程负责执行 <strong>HTML、CSS、JS</strong> 代码。</li><li>默认情况下，浏览器会为每个标签页开启一个新的渲染进程，以保证不同的标签页之间不相互影响(site-per-tab)。</li><li>所以未来谷歌浏览器想变更模式减少浏览器进程数量，同一个站点一个进程(site-per-process)。<a href="https://chromium.googlesource.com/chromium/src/+/main/docs/process_model_and_site_isolation.md#Modes-and-Availability" target="_blank" rel="noreferrer">chrome官方说明文档</a></li></ul></li></ul><h3 id="渲染主线程" tabindex="-1">渲染主线程 <a class="header-anchor" href="#渲染主线程" aria-label="Permalink to &quot;渲染主线程&quot;">​</a></h3><p>渲染主线程是浏览器中最繁忙的线程，需要它处理的任务包括但不限于：</p><ul><li>解析 HTML (拿到html字符串，解析dom树)</li><li>解析 CSS（拿到选择器，解析cssom树）</li><li>计算样式 （em、%、 =&gt; px，层叠）</li><li>布局 (算几何信息)</li><li>处理图层 (z-index)</li><li>每秒把页面画 60 次 (fps、使动画更流畅平滑)</li><li>执行全局 JS 代码</li><li>执行事件处理函数</li><li>执行计时器的回调函数</li><li>... <br></li></ul><p>要处理这么多任务，渲染主线程该如何调度呢？<br> 排队</p><ul><li>在最开始的时候，渲染主线程会进入一个无限循环</li><li>每一次循环会检查消息队列中是否有任务存在。如果有，就取出第一个任务执行，执行完一个后进入下一次循环；如果没有，则进入休眠状态。</li><li>其他所有线程（包括其他进程的线程）可以随时向消息队列添加任务。新任务会加到消息队列的末尾。在添加新任务时，如果主线程是休眠状态，则会将其唤醒以继续循环拿取任务 <br></li></ul><p><strong>整个过程，被称之为消息循环(在浏览器中)，即事件循环(在 Node.js 中)</strong> <br></p><blockquote><p>（详细过程可以去 github 上看谷歌源码, vscode GitHub Repositories 插件添加仓库地址可以在里面直接看） <br> 下面是一些知识拓展，可以更好的促进事件循环理解</p></blockquote><h4 id="如何理解-js-的异步" tabindex="-1">如何理解 JS 的异步 ? <a class="header-anchor" href="#如何理解-js-的异步" aria-label="Permalink to &quot;如何理解 JS 的异步 ?&quot;">​</a></h4><h5 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h5><p>js是一门单线程的语言，因为它运行在浏览器的渲染主线程中，而渲染主线程只有一个。<br></p><p>而渲染主线程承担着诸多的工作，渲染页面、执行js，解析html、css，执行回调...都在其中运行。<br></p><h5 id="为何要异步-解决什么问题" tabindex="-1">为何要异步？解决什么问题 ? <a class="header-anchor" href="#为何要异步-解决什么问题" aria-label="Permalink to &quot;为何要异步？解决什么问题 ?&quot;">​</a></h5><p>如果使用同步的方式，极可能会导致主线程产生的阻塞，从而导致消息队列中的其他任务无法执行。 这样会导致繁忙的主线程消耗时间，页面也无法及时更新，给用户造成卡死的现象。</p><p>所以浏览器采用异步方式来避免。<br> 具体做法是当某些任务发生时，比如计时器、网络、事件监听，<strong>主线程将任务交给其他线程去处理，自身立即结束任务的执行，转而执行后续代码。<strong>当其他线程完成时，将事先传递的</strong>回调函数包装成任务</strong>，加入到消息队列的末尾排队，等待主线程调度执行。<br></p><h5 id="异步的好处" tabindex="-1">异步的好处？ <a class="header-anchor" href="#异步的好处" aria-label="Permalink to &quot;异步的好处？&quot;">​</a></h5><p>在这种异步模式下，浏览器永不阻塞，从而最大限度的保证了单线程的流畅运行。</p><h4 id="js为何会阻碍渲染" tabindex="-1">JS为何会阻碍渲染 ? <a class="header-anchor" href="#js为何会阻碍渲染" aria-label="Permalink to &quot;JS为何会阻碍渲染 ?&quot;">​</a></h4><p>JS 和渲染都在主线程执行，当 JS 执行耗时操作时，浏览器会阻塞渲染，导致页面卡顿。</p><blockquote><p>根本原因 JS 代码的执行过程可能会修改当前的 DOM 树，所以 DOM 树的生成必须暂停。</p></blockquote><h4 id="任务有优先级吗" tabindex="-1">任务有优先级吗 ? <a class="header-anchor" href="#任务有优先级吗" aria-label="Permalink to &quot;任务有优先级吗 ?&quot;">​</a></h4><p>任务没有优先级，在消息队列中先进先出</p><p>但<strong>消息队列是有优先级的</strong></p><p>根据 W3C 的最新解释: <a href="https://html.spec.whatwg.org/multipage/webappapis.html#perform-a-microtask-checkpoint" target="_blank" rel="noreferrer">官方文档</a></p><ul><li>每个任务都有一个任务类型，同一个类型的任务必须在一个队列，不同类型的任务可以分属于不同的队列。 在一次事件循环中，浏览器可以根据实际情况从不同的队列中取出任务执行。</li><li>浏览器必须准备好一个微队列，微队列中的任务优先所有其他任务执行</li></ul><blockquote><p>随着浏览器的复杂度急剧提升，W3C 不再使用宏队列的说法</p></blockquote><p>在目前 chrome 的实现中，至少包含了下面的队列：</p><ul><li>延时队列：用于存放计时器到达后的回调任务，优先级「中」</li><li>交互队列：用于存放用户操作后产生的事件处理任务，优先级「高」</li><li>微队列：用户存放需要最快执行的任务，优先级「最高」</li></ul><blockquote><p>添加任务到微队列的主要方式主要是使用 Promise、MutationObserver</p></blockquote><blockquote><p>面试题：阐述一下 JS 的事件循环</p><p>事件循环又叫做消息循环，是浏览器渲染主线程的工作方式。</p><p>在 Chrome 的源码中，它开启一个不会结束的 for 循环，每次循环从消息队列中取出第一个任务执行，而其他线程只需要在合适的时候将任务加入到队列末尾即可。</p><p>过去把消息队列简单分为宏队列和微队列，这种说法目前已无法满足复杂的浏览器环境，取而代之的是一种更加灵活多变的处理方式。</p><p>根据 W3C 官方的解释，每个任务有不同的类型，同类型的任务必须在同一个队列，不同的任务可以属于不同的队列。不同任务队列有不同的优先级，在一次事件循环中，由浏览器自行决定取哪一个队列的任务。但浏览器必须有一个微队列，微队列的任务一定具有最高的优先级，必须优先调度执行。</p></blockquote><blockquote><p>面试题：JS 中的计时器能做到精确计时吗？为什么？</p><p>不行，因为：</p><ol><li>计算机硬件没有原子钟，无法做到精确计时</li><li>操作系统的计时函数本身就有少量偏差，由于 JS 的计时器最终调用的是操作系统的函数，也就携带了这些偏差</li><li>按照 W3C 的标准，浏览器实现计时器时，如果嵌套层级超过 5 层，则会带有 4 毫秒的最少时间，这样在计时时间少于 4 毫秒时又带来了偏差</li><li>受事件循环的影响，计时器的回调函数只能在主线程空闲时运行，因此又带来了偏差</li></ol></blockquote><h2 id="浏览器渲染原理" tabindex="-1">浏览器渲染原理 <a class="header-anchor" href="#浏览器渲染原理" aria-label="Permalink to &quot;浏览器渲染原理&quot;">​</a></h2><blockquote><p>渲染 render ：将 HTML字符串 =&gt; 屏幕上的像素点，这一解析计算过程。</p></blockquote><h3 id="浏览器是如何渲染页面的" tabindex="-1">浏览器是如何渲染页面的 ? <a class="header-anchor" href="#浏览器是如何渲染页面的" aria-label="Permalink to &quot;浏览器是如何渲染页面的 ?&quot;">​</a></h3><p>渲染时间点：</p><ul><li>网络线程：从服务器获取 HTML 文档，产生渲染任务并将它交给 消息队列</li><li>渲染线程：在事件循环机制作用下，从消息队列中取出渲染任务，开始渲染流程</li></ul><p>渲染流程： HTML 解析、样式计算、布局、分层、绘制、分块、光栅化、画。</p><p>每个阶段都有明确的输入输出，上一个阶段的输出会成为下一个阶段的输入。</p><p>这样，整个渲染流程就形成了一套组织严密的生产流水线。</p><details class="details custom-block"><summary><strong>解析 HTML</strong> - Pares HTML</summary><p>生成 DOM 树、CSSOM 树，将 HTML 文档字符串转成对象结构，便于后续处理，也便于在 JS 中操作 DOM。 Document Object Model</p><ul><li>document <ul><li>head <ul><li>title</li><li>style</li></ul></li><li>body <ul><li>h1</li><li>div - p</li><li>script CSS Object Model</li></ul></li></ul></li><li>StyleSheetList <ul><li>CSSStyleSheet1 (浏览器默认样式表) <ul><li>CSSStyleRule <ul><li>选择器</li><li>样式 <ul><li>键值对</li></ul></li></ul></li></ul></li><li>CSSStyleSheet2 (外部样式表) <ul><li>CSSStyleRule</li></ul></li><li>CSSStyleSheet3 (内部样式表) <ul><li>CSSStyleRule</li></ul></li><li>CSSStyleSheet4 (行内样式表) <ul><li>CSSStyleRule ...</li></ul></li></ul></li></ul><blockquote><p>js 可以操作除浏览器默认样式表以外的样式</p><p>给样式表添加规则 <code>document.styleSheets[0].addRule(&#39;div&#39;, &#39;border: 1px solid red&#39;)</code></p></blockquote><p>为了提高解析效率，浏览器会启动一个预解析线程率先下载和解析 CSS</p><ul><li>渲染主线程： 1、解析 HTML 5、 生成 CSSOM</li><li>预解析线程： 2、发现 CSS，交给网络线程 4、等网络线程回传CSS做铺垫处理后，将解析的结果交给主线程</li><li>网络线程：3、下载 CSS</li></ul><p>所以 CSS 不会阻塞 HTML 解析。</p><p>解析 JS</p><p>渲染主线程遇到 JS 时必须暂停一切行为，等待下载执行完后才能继续。预解析线程可以分担一点下载 JS 的任务（外部JS）。</p><ul><li>渲染主线程：1、解析 HTML ，遇到 script 暂停 5、启动 V8 引擎，执行 JS，继续解析 HTML</li><li>预解析线程：2、发现 JS，交给网络线程 4、等网络线程回传JS并交给主线程</li><li>网络线程：3、下载 JS</li></ul><div class="tip custom-block"><p class="custom-block-title">总结</p><p>解析过程中遇到 CSS 解析 CSS，遇到 JS 执行 JS。为了提高解析效率，浏览器在开始解析前，会启动一个预解析的线程，率先下载 HTML 之后的外部 CSS 文件和外部的 JS 文件</p><p>如果主线程解析到 <code>link</code> 位置，此时外部的 CSS 文件还没有解析好，主线程不会等待，继续解析后续的 HTML。这是因为下载和解析 CSS 的工作是在预解析线程中进行的。这就是 CSS 不会阻塞 HTML 解析的根本原因。</p><p>如果主线程解析到 <code>script</code> 位置，会停止解析 HTML，转而等待 JS 文件下载好，并将全局代码解析执行完成后，才能继续解析 HTML。这是因为 JS 代码的执行过程可能会修改当前的 DOM 树，所以 DOM 树的生成必须暂停。这就是 JS 会阻塞 HTML 解析的根本原因。</p><p>这一步完成后，会得到 DOM 树和 CSSOM 树，浏览器的默认样式表、内部样式表、外部样式表、行内样式表都会包含在 CSSOM 树中。</p></div></details><details class="details custom-block"><summary><strong>样式计算</strong> - Recalculate Style</summary><p>CSSOM 树 + DOM 树 =&gt; DOM 树的节点携带 Computed Style</p><p>Computed Style: red =&gt; rgb(255,0,0) em =&gt; px</p><blockquote><ul><li>css 属性值的计算过程 <ul><li>确定声明值</li><li>层叠冲突</li><li>使用继承</li><li>使用默认值</li></ul></li><li>视觉格式化模型 <ul><li>盒模型</li><li>包含块</li><li>浮动布局</li><li>流式布局</li><li>bfc</li></ul></li></ul></blockquote><div class="tip custom-block"><p class="custom-block-title">总结</p><p>主线程会遍历得到的 DOM 树，依次为树中的每个节点计算出它最终的样式，称之为 Computed Style。</p><p>在这一过程中，很多预设值会变成绝对值，比如 <code>red</code> =&gt; <code>rbg(255,0,0)</code>；相对单位会变成绝对单位，比如 <code>em</code> =&gt; <code>px</code>。</p><p>这一步完成后，会得到一颗带有样式的树。</p></div></details><details class="details custom-block"><summary><strong>布局</strong> - Layout</summary><p>根据样式算出每个节点的尺寸和位置，一个元素的位置变化就会影响布局。DOM 树 =&gt; c++ 布局树</p><blockquote><p>子元素高度、字体大小</p></blockquote><p>DOM 树和 Layout 树不一定是一一对应的</p><blockquote><p><code>display: none</code> <code>::before</code></p><p>内容必须在行盒中，行盒和块盒不能相邻（匿名行盒、匿名块盒）</p></blockquote><div class="tip custom-block"><p class="custom-block-title">总结</p><p>布局阶段会依次遍历 DOM 树的每个节点，计算每个节点的几何信息。例如节点的宽高，相对块的位置。</p><p>大部分时候，DOM 树和布局树并非一一对应。</p><p>比如 <code>display:none</code> 的节点没有几何信息，因此不会生成到布局树，又比如使用了伪元素选择器，虽然 DOM 树中不存在这些伪元素节点，但它们拥有几何信息，所以会生成到布局树中。还有匿名行盒、匿名块盒等等都会导致 DOM 树和布局树无法一一对应。</p><p>这一步完成后，会得到一颗布局树。</p></div></details><details class="details custom-block"><summary><strong>分层</strong> - Layer</summary><p>对布局树优化，进行分层。</p><blockquote><p>影响分层决策的属性： z-index、opacity、transform、filter、will-change、position、overflow、display</p></blockquote><div class="tip custom-block"><p class="custom-block-title">总结</p><p>主线程会使用一套复杂的策略对整个布局进行分层。</p><p>分层的好处在于，将来某一个层改变后，仅会对该层进行后续处理，从而提升效率。</p><p>滚动条、堆叠上下文、<code>transform</code>、<code>opactity</code> 等样式都会或多或少影响分层结果，也可以通过 <code>will-change: transform</code> 更大程度的影响分层结果。</p></div></details><details class="details custom-block"><summary><strong>绘制</strong> - Paint</summary><p>为每一层生成如何绘制的指令，即绘制命令。</p><blockquote><p>将画笔移动到坐标 10, 30 位置</p><p>画一个 10px 宽、20px 高的矩形</p><p>用红色填充矩形</p><p>每一条就是一个绘制命令</p></blockquote><p>渲染主线程的工作到此为止，剩余步骤交给其他线程完成。</p><div class="tip custom-block"><p class="custom-block-title">总结</p><p>主线程会为每个层单独产生绘制指令集，用于描述这一层的内容如何画出来。</p><hr></div></details><details class="details custom-block"><summary><strong>分块</strong> - Tiling</summary><p>分块会将每一层分为多个小的区域</p><div class="tip custom-block"><p class="custom-block-title">总结</p><p>完成绘制后，主线程将每个图层的绘制信息提交给合成线程，剩余工作由合成线程完成。</p><p>合成线程首先对每个图层进行分块，将其划分为更多的小区域。</p><p>它会从线程池中拿取多个线程来完成分块工作。</p></div></details><details class="details custom-block"><summary><strong>光栅化</strong> - Raster</summary><p>光栅化将每个块变成位图，优先处理靠视口近的块，此过程会用到 GPU (显卡) 加速提高绘制效率。</p><div class="tip custom-block"><p class="custom-block-title">总结</p><p>合成线程会将块信息交给 GPU 进程，以极高的速度完成光栅化。</p><p>GPU 进程会开启多个线程来完成光栅化，并且优先处理靠近视口区域的块。</p><p>光栅化的结果就是一块一块的位图。</p></div></details><details class="details custom-block"><summary><strong>画</strong> - Draw</summary><p>合成线程计算每个位图在屏幕上的位置，交给 GPU 进行最终呈现。</p><blockquote><ul><li>渲染进程 (沙盒) <ul><li>渲染主线程</li><li>合成线程</li></ul></li></ul></blockquote><div class="tip custom-block"><p class="custom-block-title">总结</p><p>合成线程拿到每个层，每个块的位图后，生成一个个 「指引（quad）」信息。</p><p>指引会标识出每个位图应该画到屏幕的哪个位置，以及会考虑到旋转、缩放等变形。</p><p>变形发生在合成线程，与渲染主线程无关，这就是 <code>transform</code> 效率高的本质原因。</p><p>合成线程会把 quad 提交给 GPU 进程，由 GPU 进程产生系统调用，提交给 GPU 硬件，完成最终的屏幕成像。</p></div></details><blockquote><p>搞清了浏览器渲染原理，接下来许多问题也就迎刃而解了</p></blockquote><h3 id="什么是-reflow" tabindex="-1">什么是 reflow ? <a class="header-anchor" href="#什么是-reflow" aria-label="Permalink to &quot;什么是 reflow ?&quot;">​</a></h3><blockquote><p>它耗时是因为cssom/dom变更了，几何信息变更，要重新再走一次：样式计算、布局、分层、绘制、分块、光栅化、画。</p></blockquote><p>reflow 的本质就是重新计算 layout 树。</p><p>当进行了会影响布局树的操作后，需要重新计算布局树，会引发 layout。</p><p>为了避免连续的多次操作导致布局树反复计算，浏览器会合并这些操作，当 JS 代码全部完成后再进行统一计算。所以，改动属性造成的 reflow 是异步完成的。</p><p>也同样因为如此，当 JS 获取布局属性时，就可能造成无法获取到最新的布局信息。</p><p>浏览器在反复权衡下，最终决定获取属性立即 reflow。</p><h3 id="什么是-repaint" tabindex="-1">什么是 repaint ? <a class="header-anchor" href="#什么是-repaint" aria-label="Permalink to &quot;什么是 repaint ?&quot;">​</a></h3><p>repaint 的本质就是重新根据分层信息计算了绘制指令。</p><p>当改动了可见样式后，就需要重新计算，会引发 repaint。</p><p>由于元素的布局信息也属于可见样式，所以 reflow 一定会引起 repaint。</p><h3 id="为什么-transform-的效率高" tabindex="-1">为什么 transform 的效率高 ? <a class="header-anchor" href="#为什么-transform-的效率高" aria-label="Permalink to &quot;为什么 transform 的效率高 ?&quot;">​</a></h3><p>因为 transform 既不会影响布局也不会影响绘制指令，它影响的只是渲染流程的最后一个「draw」阶段</p><p>由于 draw 阶段在合成线程中，所以 transform 的变化几乎不会影响渲染主线程。反之，渲染主线程无论如何忙碌，也不会影响 transform 的变化。</p>',67)]))}const b=e(a,[["render",p]]);export{m as __pageData,b as default};
