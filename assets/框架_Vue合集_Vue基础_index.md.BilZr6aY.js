import{_ as o,c as d,a2 as t,o as a}from"./chunks/framework.BQmytedh.js";const m=JSON.parse('{"title":"Vue基础","description":"双向数据绑定, 模板语法, 生命周期, 实例, 组件通信, props, $emit, 计算属性, 侦听器, 指令, 条件与循环渲染, 事件处理","frontmatter":{"title":"Vue基础","description":"双向数据绑定, 模板语法, 生命周期, 实例, 组件通信, props, $emit, 计算属性, 侦听器, 指令, 条件与循环渲染, 事件处理","keywords":["双向数据绑定","模板语法","生命周期","实例","组件通信","props","$emit","计算属性","侦听器","指令","条件与循环渲染","事件处理"]},"headers":[],"relativePath":"框架/Vue合集/Vue基础/index.md","filePath":"框架/Vue合集/Vue基础/index.md","lastUpdated":1732535835000}'),c={name:"框架/Vue合集/Vue基础/index.md"};function s(r,e,u,i,l,n){return a(),d("div",null,e[0]||(e[0]=[t('<h2 id="vue基础" tabindex="-1">Vue基础 <a class="header-anchor" href="#vue基础" aria-label="Permalink to &quot;Vue基础&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">主要考察点</p><p>Vue 的双向数据绑定、模板语法、Vue 实例与生命周期钩子、组件之间的通信（props 和 $emit）、条件与循环渲染、事件处理、计算属性与侦听器的使用、以及 Vue 的指令系统。</p></div><h3 id="vue-计算属性的函数名和-data-中的属性可以同名吗-为什么" tabindex="-1">Vue 计算属性的函数名和 data 中的属性可以同名吗 ? 为什么 ? <a class="header-anchor" href="#vue-计算属性的函数名和-data-中的属性可以同名吗-为什么" aria-label="Permalink to &quot;Vue 计算属性的函数名和 data 中的属性可以同名吗 ? 为什么 ?&quot;">​</a></h3><p>不可以。因为 Vue 会<strong>将 data 中的属性和计算属性都挂载到 Vue 实例上</strong>，如果它们同名，则会发生<strong>命名冲突</strong>，导致实例中的<strong>属性被覆盖</strong>，从而引发不可预知的错误。</p><details class="details custom-block"><summary>代码示例</summary><p><strong>1）命名冲突的本质</strong>： 在 Vue 中，<code>data</code> 和计算属性（<code>computed</code>）最终都会作为 Vue 实例的一个属性存在。如果我们在 <code>data</code> 中定义了一个属性 <code>foo</code>，同时又在 <code>computed</code> 中定义了一个名为 <code>foo</code> 的计算属性，二者会产生命名冲突，Vue 会警告你存在重复定义。Vue 在初始化时会按照一定的顺序（如<code>Props</code>、<code>methods</code>、<code>data</code>、<code>computed</code>、<code>watch</code>）将这些属性挂载到 Vue 实例上，后<code>挂载的属性会覆盖先挂载的同名属性</code>。</p><p><strong>2）计算属性的优先级</strong>： <code>data</code> 的优先级高于计算属性。如果在 <code>data</code> 和计算属性中存在相同的属性，那么在模板中使用这些属性时，会优先使用 <code>data</code> 中的数据，因为 <code>data</code> 是直接存储数据的，而计算属性是基于 <code>data</code> 或其他属性的变化进行计算的‌。</p><p><strong>3）避免命名冲突的最佳实践</strong>： 为了保持代码的清晰和简洁，建议在项目实施时遵循以下几点：</p><ul><li>命名规范： 确保 <code>data</code> 和计算属性有不同的命名，避免命名冲突。</li><li>模块化管理： 将各自逻辑进行分模块管理，提高代码的可读性和可维护性。</li><li>严格代码审查： 在代码审查阶段注意这些潜在问题，及时纠正。</li></ul><p><strong>4）命名冲突如何提醒</strong>： 在运行环境下，Vue 通常会在控制台输出警告信息，来提醒开发者存在属性命名冲突，帮助快速定位和修复问题。</p><p><strong>5）其它Vue中的相关特性</strong>：</p><ul><li>methods： 与计算属性类似，<code>methods</code> 中的方法也会被挂载到 Vue 实例上，同样需要避免与 <code>data</code> 和计算属性同名。</li><li>Watchers： 虽然数据监听器（<code>watchers</code>）与 <code>data</code> 和计算属性相关，但它们不会直接参与命名冲突，因为 <code>watchers</code> 本身不挂载属性名到 Vue 实例上。</li></ul></details>',5)]))}const V=o(c,[["render",s]]);export{m as __pageData,V as default};
