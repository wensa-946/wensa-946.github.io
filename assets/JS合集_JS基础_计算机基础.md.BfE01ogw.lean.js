import{_ as i,c as a,a2 as n,o as l}from"./chunks/framework.BQmytedh.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"JS合集/JS基础/计算机基础.md","filePath":"JS合集/JS基础/计算机基础.md","lastUpdated":1732032547000}'),e={name:"JS合集/JS基础/计算机基础.md"};function h(t,s,p,k,d,r){return l(),a("div",null,s[0]||(s[0]=[n(`<h3 id="javascript-中常用的正则表达式有哪些" tabindex="-1">JavaScript 中常用的正则表达式有哪些 ? <a class="header-anchor" href="#javascript-中常用的正则表达式有哪些" aria-label="Permalink to &quot;JavaScript 中常用的正则表达式有哪些 ?&quot;">​</a></h3><details class="details custom-block"><summary>常用案例</summary><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 验证邮箱</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> emailRegex</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\s@]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\s@]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\s@]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 验证电话号码</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> phoneRegex</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[3456789]\\d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{9}$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 验证邮政编码</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> postcodeRegex</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[1-9]\\d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{5}$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 验证URL</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> urlRegex</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(https</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">:</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\/\\/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[\\da-z.-]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[a-z.]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{2,6}</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[/\\w .-]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 验证日期(格式: YYYY-MM-DD)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> dateRegex</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{4}</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{2}</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{2}$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 匹配全是数字的字符串</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> numberRegex</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 匹配全是字母的字符串</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> letterRegex</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[A-Za-z]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 验证码(至少8个字符,且包含至少一个数字和一个字母)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> passwordRegex</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(?=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)(?=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[A-Za-z]</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[\\w]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{8,}$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div></details><h4 id="正则表达式基本语法" tabindex="-1">正则表达式基本语法 <a class="header-anchor" href="#正则表达式基本语法" aria-label="Permalink to &quot;正则表达式基本语法&quot;">​</a></h4><ul><li><code>^</code>表示字符串的开始, <code>$</code>表示字符串的结束</li><li><code>\\d</code>匹配一个数字, 等价于<code>[0-9]</code></li><li><code>\\w</code>匹配一个字母或数字字符, 等价于<code>[A-Za-z0-9]</code></li><li><code>+</code>匹配前面的子表达式一次或多次 例如<code>\\d+</code>表示至少一个数字</li></ul><h4 id="正则表达式常用修饰符" tabindex="-1">正则表达式常用修饰符 <a class="header-anchor" href="#正则表达式常用修饰符" aria-label="Permalink to &quot;正则表达式常用修饰符&quot;">​</a></h4><ul><li><code>i</code>执行不区分大小写的匹配 例如<code>/abc/i</code>可以匹配<code>AbC</code></li><li><code>g</code>执行全局匹配, 找到所有匹配而不是只找到第一个 例如<code>/b/g</code>可以匹配字符串中所有的<code>b</code></li><li><code>m</code>执行多行匹配, 例如<code>/^b/m</code>可以匹配每一行的第一个<code>b</code></li></ul><h4 id="正则表达式的方法" tabindex="-1">正则表达式的方法 <a class="header-anchor" href="#正则表达式的方法" aria-label="Permalink to &quot;正则表达式的方法&quot;">​</a></h4><ul><li><code>test()</code> 在字符串中测试是否匹配, 返回<code>true</code>或<code>false</code> 例如<code>/abc/.test(&#39;abcdef&#39;)</code>返回<code>true</code></li><li><code>exec()</code> 在字符串中执行搜索匹配并返回结果数组或<code>null</code> 例如<code>/\\d+/g.exec(&#39;123abc&#39;)</code>返回<code>[&#39;123&#39;]</code></li><li>字符串方法 <ul><li><code>match()</code> 返回匹配结果数组或<code>null</code> 例如<code>&#39;abcdef&#39;.match(/b/g)</code>返回<code>[&#39;b&#39;]</code></li><li><code>replace()</code> 替换匹配项, 可以使用正则表达式或字符串作为参数 例如<code>&#39;abcdef&#39;.replace(/b/g, &#39;X&#39;)</code>返回<code>aXcdef</code></li><li><code>search()</code> 返回匹配项的索引或<code>-1</code> 例如<code>&#39;abcdef&#39;.search(/b/)</code>返回<code>1</code></li><li><code>split()</code> 根据正则表达式将字符串拆分为子字符串数组 例如<code>&#39;a,b,c&#39;.split(/,/)</code>返回<code>[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</code></li></ul></li></ul><h3 id="说说你对-json-的了解" tabindex="-1">说说你对 JSON 的了解 ? <a class="header-anchor" href="#说说你对-json-的了解" aria-label="Permalink to &quot;说说你对 JSON 的了解 ?&quot;">​</a></h3><h4 id="json-javascript-object-notation" tabindex="-1">JSON (JavaScript Object Notation) <a class="header-anchor" href="#json-javascript-object-notation" aria-label="Permalink to &quot;JSON (JavaScript Object Notation)&quot;">​</a></h4><p>是一种轻量级的数据交换格式, 易于阅读和编写, 同时也易于机器解析和生成。<br> JSON 格式独立于编程语言, 但其语法于 JavaScript 对象表示语法非常相似。</p><h4 id="基本数据类型和结构" tabindex="-1">基本数据类型和结构 <a class="header-anchor" href="#基本数据类型和结构" aria-label="Permalink to &quot;基本数据类型和结构&quot;">​</a></h4><ul><li>数字 (<code>number</code>)</li><li>字符串 (<code>string</code>)</li><li>布尔值 (<code>boolean</code>): true 或 false</li><li>数组 (<code>array</code>): 由零个或多个值的顺序列表表示</li><li>对象 (<code>object</code>): 由键值对组成, 其中键是字符串, 值可以是任何 JSON 数据类型</li><li><code>null</code>: 表示空值</li></ul><details class="details custom-block"><summary>基本语法</summary><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;John&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;age&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;isStudent&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;courses&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Math&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Physics&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;address&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;street&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;123 Main St&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;city&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;New York&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;country&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;USA&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></details><h4 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h4><ul><li>主要用于数据交换, 特别是在 web 浏览器和服务器之间 <ul><li>客户端和服务器之间通过 HTTP 请求进行数据交换, 使用 JSON 作为数据的格式</li></ul></li><li>存储配置文件 <ul><li>许多现代应用程序使用 JSON 格式的配置文件, 易于阅读和修改</li></ul></li></ul><h4 id="相比其他格式的优势" tabindex="-1">相比其他格式的优势 <a class="header-anchor" href="#相比其他格式的优势" aria-label="Permalink to &quot;相比其他格式的优势&quot;">​</a></h4><ul><li>与 XMLN相比, JSON 更轻量级, 阅读和编写更加简洁</li><li>支持丰富的数据类型, 如数组和内嵌对象, 直观地表示复杂的数据结构</li></ul><h4 id="解析和生成" tabindex="-1">解析和生成 <a class="header-anchor" href="#解析和生成" aria-label="Permalink to &quot;解析和生成&quot;">​</a></h4><ul><li><code>JSON.parse()</code> 将 JSON 字符串转换为 JavaScript 对象</li><li><code>Json.stringify()</code> 将 JavaScript 对象转换为 JSON 字符串</li></ul><h4 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h4><ul><li>JSON 的键名必须使用双引号括起来, 字符串值也需要使用双引号</li><li>JSON 的表示法不支持对函数、日期对象或正则表达式的直接序列化和反序列化</li></ul><h4 id="安全性" tabindex="-1">安全性 <a class="header-anchor" href="#安全性" aria-label="Permalink to &quot;安全性&quot;">​</a></h4><ul><li>在解析来自不受信任的数据源 JSON 时, 需小心防范恶意代码注入。</li><li>可以使用标准库或框架中内置的解析方法来确保安全性和正确性, 而不是使用<code>eval()</code>方法解析 JSON</li></ul><h3 id="垃圾回收机制" tabindex="-1">垃圾回收机制 <a class="header-anchor" href="#垃圾回收机制" aria-label="Permalink to &quot;垃圾回收机制&quot;">​</a></h3><h4 id="为什么要垃圾回收" tabindex="-1">为什么要垃圾回收 <a class="header-anchor" href="#为什么要垃圾回收" aria-label="Permalink to &quot;为什么要垃圾回收&quot;">​</a></h4><ul><li>如果没有垃圾回收机制，适时清理不被引用的值并释放相应的内存空间。JavaScript 解释器将会消耗完系统中所有可用内存，造成系统崩溃。</li></ul><h4 id="垃圾回收的核心思路" tabindex="-1">垃圾回收的核心思路 <a class="header-anchor" href="#垃圾回收的核心思路" aria-label="Permalink to &quot;垃圾回收的核心思路&quot;">​</a></h4><ul><li>清理掉内存中不再被引用的值 <ul><li>局部变量：在函数调用结束后即是无用的，可以被回收掉；</li><li>全局变量：在浏览器卸载页面的时候才会消失。 (由于这个过程消耗较大，所以解释器会按照固定时间周期性的执行回收。 )</li></ul></li></ul><h4 id="垃圾回收的两种方式" tabindex="-1">垃圾回收的两种方式 <a class="header-anchor" href="#垃圾回收的两种方式" aria-label="Permalink to &quot;垃圾回收的两种方式&quot;">​</a></h4><ul><li>标记清除 (JS最常用 ) <ul><li>给所有变量增加一个标记： 如果是进入执行环境 (比如申明变量 )，则标记为“进入环境” 如果是结束执行环境 (比如执行完相关函数 )，则标记为“离开环境”</li><li>去掉“进入环境”的变量标记以及被该变量所引用的变量标记 (比如闭包 )</li><li>还存在标记的变量即是需要被清理的变量。</li></ul></li><li>引用计数 <ul><li>申明了一个变量，并且将一个引用类型的值赋值给这个变量，那么这变量的引用就加1；</li><li>如果这个变量的值又指向另外一个值，或者说这个变量被重新赋值了，那么以上的引用类型的值的引用次数就减1；</li><li>如此一来，该引用类型的值的引用次数即为0，垃圾回收器会在运行的时候清理掉引用次数为0的值并释放相应的内存空间；</li></ul></li></ul><div class="warning custom-block github-alert"><p class="custom-block-title">特别注意：引用计数在代码中存在循环引用时会出现问题</p><p></p></div><details class="details custom-block"><summary>常见的内存泄漏问题</summary><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-KuNQj" id="tab-N6ORV-J" checked><label data-title="意外声明全局变量" for="tab-N6ORV-J">意外声明全局变量</label><input type="radio" name="group-KuNQj" id="tab-fcgESk3"><label data-title="定时器" for="tab-fcgESk3">定时器</label><input type="radio" name="group-KuNQj" id="tab-flbYeke"><label data-title="闭包" for="tab-flbYeke">闭包</label></div><div class="blocks"><div class="language-js vp-adaptive-theme active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 此时变量name会被当做window的属性，即全局对象来处理，只要window本身不被清理就不会消失。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Jake&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Jake&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setInterval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	consolog.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> outer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Jake&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></div></div></details><h3 id="escape、encodeuri-和-encodeuricomponent-有什么区别" tabindex="-1">escape、encodeURI 和 encodeURIComponent 有什么区别 ? <a class="header-anchor" href="#escape、encodeuri-和-encodeuricomponent-有什么区别" aria-label="Permalink to &quot;escape、encodeURI 和 encodeURIComponent 有什么区别 ?&quot;">​</a></h3><p>都是处理URL编码问题的函数</p><h4 id="escape" tabindex="-1">escape() <a class="header-anchor" href="#escape" aria-label="Permalink to &quot;escape()&quot;">​</a></h4><ul><li><code>escape</code> 已经废弃, 可能在维护旧代码时遇到它</li><li>不能正确处理非 ASCII 字符</li><li>主要用于对字符串进行编码。它会将所有非字母数字字符转换为它们的十六进制转义序列, 除了@ * _ + - . / 之外</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">escape</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello World! @*_+-./&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Hello%20World%21%20@*_+-./</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="encodeuri" tabindex="-1">encodeURI() <a class="header-anchor" href="#encodeuri" aria-label="Permalink to &quot;encodeURI()&quot;">​</a></h4><ul><li>用于编码完整的 URI</li><li>可以正确处理非 ASCII 字符</li><li>可以编码所有对 URI 有特殊含义的字符, 除了 , / ? : @ &amp; = + $ # 之外</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encodeURI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com/path?name=张三&amp;age=18&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// https://example.com/path?name=%E5%BC%A0%E4%B8%89&amp;age=18</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="encoeduricomponent" tabindex="-1">encoedURIComponent() <a class="header-anchor" href="#encoeduricomponent" aria-label="Permalink to &quot;encoedURIComponent()&quot;">​</a></h4><ul><li>用于编码 URI 的组成部分</li><li>可以正确处理非 ASCII 字符</li><li>它编码对所有 URI 有特殊含义的字符</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encoedURIComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com/path?name=张三&amp;age=18&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// https%3A%2F%2Fexample.com%2Fpath%3Fname%3D%E5%BC%A0%E4%B8</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>`,44)]))}const g=i(e,[["render",h]]);export{c as __pageData,g as default};
